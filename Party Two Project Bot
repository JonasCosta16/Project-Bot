import pdb; pdb.set_trace()
import json
import pdb
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from main import TestCase
class T01_RegisterTest(TestCase):

    def setUp(self) -> None:
        super().setUp()

    def test_01_register_user(self):

        self.cadastre_se = self.driver.find_element_by_xpath('xpath para o elemento com evento de te redirecionar ao cadastro')

        self.cadastre_se.click()
        #Aqui Vou abrir o Site emailfake.com, e Captar o email salvando no atributo self.email
        self.temp_mail_base()

        self.username_input = self.driver.find_element_by_name('nome do input com o username para o usuário')

        self.username_input.send_keys('User Selenium Test')

        self.email_input = self.driver.find_element_by_name('nome do input onde será colocado o e-mail para cadastro')

        self.email_input.send_keys(self.email)

        self.password_input = self.driver.find_element_by_name('nome di input onde será inserida a senha')

        self.password_input.send_keys(self.password)

        self.confirm_password_input = self.driver.find_element_by_name('nome do input onde inserimos a confirmação da senha')

        self.confirm_password_input.send_keys(self.password)

        self.driver.find_element_by_xpath('expath para o button que envia o formulário, ou dispare o formulário de outra forma').click()

        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.XPATH, 'xpath do elemento que confirma o sucesso do envio do form'))
        ).click()
# Aqui Ele vai aguardar por até 240 segundos que algum elemento no'driver' do emailfake.com tenha o valor do email que envia a confirmação.
        WebDriverWait(self.email_driver, 240).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(),'nao-responda@dominio.com'')]"))
        ).click()
        #aqui ele vai clicar no primeiro link da pagina dentro da tabela de email do emailfake.com, o emai lé temporário, deverá sempre ser o unico email recebido até o momento
        WebDriverWait(self.email_driver, 60).until(
            EC.presence_of_element_located((By.XPATH, '//*[@id="email-table"]/div[2]/div[4]/div[3]/div/div[2]/a'))
        ).click()
#aqui vou apontar o foco na tab do link aberto após clicar no email recebido no site emailfake.com   self.email_driver.switch_to_window(self.email_driver.window_handles[1])
        WebDriverWait(self.email_driver, 60).until(
            EC.presence_of_element_located((By.XPATH, 'devemos informar o xpath de algum elemento que confirme que o email foi confirmado'))
        ).click()

        #salvará o email utilizado em um json para sabermos o email tanto para logar novamente, como para testar outros recursos como alteração de senha.
        file = open('/tests/files/email.json','w+')
        json.dump({'email':self.email}, file)
        file.close()
    pdb.run(globals=None, locals=None)
